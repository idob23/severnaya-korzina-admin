// lib/services/excel_parser_service.dart
// –£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
// –ò–°–ü–û–õ–¨–ó–£–ï–ú spreadsheet_decoder –≤–º–µ—Å—Ç–æ excel

import 'dart:io';
import 'package:spreadsheet_decoder/spreadsheet_decoder.dart';

class ExcelParserService {
  /// –ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  static Future<Map<String, dynamic>> parseExcelFile(String filePath) async {
    try {
      print('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞: $filePath');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      final file = File(filePath);
      if (!file.existsSync()) {
        throw Exception('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filePath');
      }

      print('   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.lengthSync()} –±–∞–π—Ç');

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      final bytes = file.readAsBytesSync();
      print('   –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${bytes.length} –±–∞–π—Ç');

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Excel
      SpreadsheetDecoder? decoder;
      try {
        print('   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Excel...');
        decoder = SpreadsheetDecoder.decodeBytes(bytes);
        print('   ‚úÖ Excel –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (e) {
        print('   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel —Ñ–∞–π–ª: $e');
      }

      if (decoder == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª');
      }

      print('   –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${decoder.tables.keys.length}');
      print('   –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤: ${decoder.tables.keys.join(", ")}');

      final products = <Map<String, dynamic>>[];
      final categories = <Map<String, dynamic>>[];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
      for (var tableName in decoder.tables.keys) {
        print('\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: "$tableName"');

        final table = decoder.tables[tableName];
        if (table == null) {
          print('   ‚ö†Ô∏è –õ–∏—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          continue;
        }

        print('   –°—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${table.rows.length}');
        if (table.rows.isEmpty) {
          print('   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ');
          continue;
        }

        print('   –ö–æ–ª–æ–Ω–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ: ${table.rows[0].length}');

        try {
          final sheetResult = _parseSheet(table, tableName);

          final sheetProducts =
              sheetResult['products'] as List<Map<String, dynamic>>?;
          final sheetCategories =
              sheetResult['categories'] as List<Map<String, dynamic>>?;

          if (sheetProducts != null) {
            products.addAll(sheetProducts);
            print('   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${sheetProducts.length}');
          }

          if (sheetCategories != null) {
            categories.addAll(sheetCategories);
            print('   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${sheetCategories.length}');
          }
        } catch (e, stackTrace) {
          print('   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—Å—Ç–∞ "$tableName": $e');
          print('   Stack trace: $stackTrace');
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final uniqueCount = _getUniqueCategories(categories).length;

      print('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω:');
      print('   –¢–æ–≤–∞—Ä–æ–≤: ${products.length}');
      print('   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $uniqueCount');

      final result = {
        'success': true,
        'products': products,
        'categories': categories,
        'summary': {
          'totalProducts': products.length,
          'totalCategories': categories.length,
          'uniqueCategories': uniqueCount,
        },
      };

      return result;
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel: $e');
      print('Stack trace: $stackTrace');
      return {
        'success': false,
        'error': e.toString(),
        'products': <Map<String, dynamic>>[],
        'categories': <Map<String, dynamic>>[],
      };
    }
  }

  /// –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –ª–∏—Å—Ç Excel
  static Map<String, dynamic> _parseSheet(
      SpreadsheetTable table, String sheetName) {
    final products = <Map<String, dynamic>>[];
    final categories = <Map<String, dynamic>>[];

    try {
      print('   üìã –ê–Ω–∞–ª–∏–∑ –ª–∏—Å—Ç–∞ "$sheetName"...');
      final rowCount = table.rows.length;
      print('   –°—Ç—Ä–æ–∫: $rowCount');

      if (rowCount == 0) {
        print('   ‚ö†Ô∏è –õ–∏—Å—Ç –ø—É—Å—Ç–æ–π');
        return {'products': products, 'categories': categories};
      }

      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      final headerRow = _findHeaderRow(table);

      if (headerRow == -1) {
        print('   ‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—Å—Ç');
        return {'products': products, 'categories': categories};
      }

      print('   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–æ–∫–µ: ${headerRow + 1}');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
      final columnMap = _mapColumns(table, headerRow);
      print('   üìä –ö–æ–ª–æ–Ω–∫–∏: $columnMap');

      String? currentCategory;
      String? currentSubcategory;
      int processedRows = 0;
      int skippedRows = 0;

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      for (int i = headerRow + 1; i < rowCount; i++) {
        try {
          final row = table.rows[i];

          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —è—á–µ–µ–∫
          final code = _getCellValue(row, columnMap['code']);
          final name = _getCellValue(row, columnMap['name']);
          final unit = _getCellValue(row, columnMap['unit']);
          final priceStr = _getCellValue(row, columnMap['price']);
          final stock = _getCellValue(row, columnMap['stock']);
          final inPackage = _getCellValue(row, columnMap['inPackage']);
          final packagePrice = _getCellValue(row, columnMap['packagePrice']);

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
          if (code == null && name == null) {
            skippedRows++;
            continue;
          }

          // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
          final price = _parsePrice(priceStr);

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥/–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ –ù–ï–¢ —Ü–µ–Ω—ã - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
          if ((code != null || name != null) && price == null) {
            final categoryName = name ?? code ?? '';

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ç—Å—Ç—É–ø–∞–º
            if (categoryName.startsWith('    ')) {
              // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)
              currentSubcategory = categoryName.trim();
              categories.add({
                'name': currentSubcategory,
                'parent': currentCategory,
                'level': 2,
                'row': i + 1,
              });
            } else {
              // –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
              currentCategory = categoryName.trim();
              currentSubcategory = null;
              categories.add({
                'name': currentCategory,
                'parent': null,
                'level': 1,
                'row': i + 1,
              });
            }
            processedRows++;
            continue;
          }

          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞ - —ç—Ç–æ —Ç–æ–≤–∞—Ä
          if (price != null && name != null && name.trim().isNotEmpty) {
            final product = {
              'name': name.trim(),
              'price': price,
              'unit': unit?.trim() ?? '—à—Ç',
              'code': code?.trim(),
              'maxQuantity': _parseInt(stock),
              'inPackage': _parseInt(inPackage),
              'packagePrice': _parsePrice(packagePrice),
              'category': currentCategory,
              'subcategory': currentSubcategory,
              'row': i + 1,
              'isNew': true,
              'isDuplicate': false,
            };

            products.add(product);
            processedRows++;
          } else {
            skippedRows++;
          }
        } catch (e) {
          print('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}: $e');
          skippedRows++;
        }
      }

      print('   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: $processedRows');
      print('   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: $skippedRows');
      print('   üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${products.length}');
      print('   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}');
    } catch (e, stackTrace) {
      print('   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–∏—Å—Ç–∞: $e');
      print('   Stack trace: $stackTrace');
    }

    return {'products': products, 'categories': categories};
  }

  /// –ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã
  static int _findHeaderRow(SpreadsheetTable table) {
    final headerKeywords = [
      '–∫–æ–¥',
      'code',
      '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
      '–Ω–∞–∑–≤–∞–Ω–∏–µ',
      'name',
      '—Ç–æ–≤–∞—Ä',
      '—Ü–µ–Ω–∞',
      'price',
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
      '–µ–¥',
      'unit',
      '–µ–¥–∏–Ω–∏—Ü–∞'
    ];

    final rowCount = table.rows.length;
    final searchLimit = rowCount < 50 ? rowCount : 50;

    for (int i = 0; i < searchLimit; i++) {
      try {
        final row = table.rows[i];
        int keywordsFound = 0;

        for (var cell in row) {
          if (cell == null) continue;

          final value = cell.toString().toLowerCase();
          if (value.isEmpty) continue;

          for (var keyword in headerKeywords) {
            if (value.contains(keyword)) {
              keywordsFound++;
              break;
            }
          }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (keywordsFound >= 3) {
          return i;
        }
      } catch (e) {
        print('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ $i –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏: $e');
        continue;
      }
    }

    return -1;
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  static Map<String, int?> _mapColumns(SpreadsheetTable table, int headerRow) {
    final columnMap = <String, int?>{
      'code': null,
      'name': null,
      'unit': null,
      'price': null,
      'stock': null,
      'inPackage': null,
      'packagePrice': null,
    };

    try {
      final row = table.rows[headerRow];

      for (int i = 0; i < row.length; i++) {
        final cell = row[i];
        if (cell == null) continue;

        final header = cell.toString().toLowerCase();
        if (header.isEmpty) continue;

        // –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞
        if (header.contains('–∫–æ–¥') ||
            header.contains('code') ||
            header.contains('–∞—Ä—Ç–∏–∫—É–ª')) {
          columnMap['code'] = i;
        }
        // –ù–∞–∑–≤–∞–Ω–∏–µ
        else if (header.contains('–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞') ||
            header.contains('–Ω–∞–∑–≤–∞–Ω–∏–µ') ||
            header.contains('name') ||
            header.contains('—Ç–æ–≤–∞—Ä') ||
            header.contains('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')) {
          columnMap['name'] = i;
        }
        // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        else if ((header.contains('–µ–¥') && !header.contains('—Ü–µ–Ω–∞')) ||
            header.contains('unit') ||
            header.contains('–µ–¥–∏–Ω–∏—Ü–∞')) {
          columnMap['unit'] = i;
        }
        // –¶–µ–Ω–∞
        else if ((header.contains('—Ü–µ–Ω–∞') && !header.contains('—É–ø')) ||
            (header.contains('price') && !header.contains('—É–ø')) ||
            (header.contains('—Å—Ç–æ–∏–º–æ—Å—Ç—å') && !header.contains('—É–ø'))) {
          columnMap['price'] = i;
        }
        // –û—Å—Ç–∞—Ç–æ–∫
        else if (header.contains('–æ—Å—Ç–∞—Ç–æ–∫') ||
            header.contains('stock') ||
            header.contains('–Ω–∞–ª–∏—á–∏–µ')) {
          columnMap['stock'] = i;
        }
        // –í —É–ø–∞–∫–æ–≤–∫–µ
        else if (header.contains('–≤ —É–ø') ||
            header.contains('–≤ —É–ø–∞–∫') ||
            header.contains('—É–ø–∞–∫–æ–≤–∫–∞')) {
          columnMap['inPackage'] = i;
        }
        // –¶–µ–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏
        else if (header.contains('—Ü–µ–Ω–∞ —É–ø') ||
            header.contains('—Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ø')) {
          columnMap['packagePrice'] = i;
        }
      }
    } catch (e) {
      print('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: $e');
    }

    return columnMap;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
  static String? _getCellValue(List<dynamic> row, int? columnIndex) {
    try {
      if (columnIndex == null || columnIndex >= row.length || columnIndex < 0) {
        return null;
      }

      final cell = row[columnIndex];
      if (cell == null) return null;

      final value = cell.toString().trim();
      return value.isEmpty ? null : value;
    } catch (e) {
      return null;
    }
  }

  /// –ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
  static double? _parsePrice(String? value) {
    if (value == null || value.isEmpty) return null;

    try {
      final cleaned = value.replaceAll(RegExp(r'[^\d.,]'), '');
      if (cleaned.isEmpty) return null;

      final normalized = cleaned.replaceAll(',', '.');
      return double.tryParse(normalized);
    } catch (e) {
      return null;
    }
  }

  /// –ü–∞—Ä—Å–∏—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  static int? _parseInt(String? value) {
    if (value == null || value.isEmpty) return null;

    try {
      final cleaned = value.replaceAll(RegExp(r'[^\d]'), '');
      if (cleaned.isEmpty) return null;

      return int.tryParse(cleaned);
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static List<String> _getUniqueCategories(
      List<Map<String, dynamic>> categories) {
    try {
      return categories
          .map((c) => c['name'] as String?)
          .where((name) => name != null && name.isNotEmpty)
          .cast<String>()
          .toSet()
          .toList();
    } catch (e) {
      return [];
    }
  }
}
